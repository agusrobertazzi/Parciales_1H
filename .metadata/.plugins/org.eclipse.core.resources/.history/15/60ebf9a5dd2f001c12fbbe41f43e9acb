#include "arcade.h"
/*
 * brief: Inicializa la estructura de Arcades
 * param: Arcade* listArcade
 * param: Int lenArcade
 * return: Retorna FALSE en caso de error o TRUE sí sale bien
 * */
int initArcade(Arcade* list, int len)
{
	int status = FALSE;
	int i;

	if(list != NULL && len > 0)
	{
		status = TRUE;
		for(i = 0; i < len; i++)
		{
			list[i].isEmpty = TRUE;
		}
	}

	return status;
}

/*
 * brief: Busca la posición de un Arcade mediante su ID
 * param: Arcade* listArcade
 * param: Int lenArcade
 * param: Int id
 * return: Retorna FALSE en caso de error o la posición del Arcade buscado
 * */
int findArcadeByID(Arcade* list, int len, int id)
{
	int status = FALSE;
	int i;

	if(list != NULL && len > 0)
	{
		for(i = 0; i < len; i++)
		{
			if(list[i].id == id && list[i].isEmpty == FALSE)
			{
				status = i;
				break;
			}
		}
	}

	return status;
}

int deleteArcade(Arcade* list, int len, int id)
{
	int status = FALSE;
	int idValidator;

	if(list != NULL && len > 0 && id != FALSE)
	{
		status = TRUE;
		idValidator = ingresoInt("Vuelva a ingresar el ID a eliminar para confirmar: ", "Error. Número no válido: ");
		while(idValidator != id)
		{
			idValidator = ingresoInt("Error. Vuelva a ingresar el ID a eliminar para confirmar: ", "Error. Número no válido: ");
		}
		list[id].isEmpty = TRUE;
	}


	return status;
}

int printArcades(Arcade* list, int len)
{
	int status = FALSE;
	int i;

	if(list != NULL && len > 0)
	{
		status = TRUE;

		puts("--------------------------------------");
		for(i = 0; i < len; i++)
		{
			if(list[i].isEmpty == FALSE)
			{
				switch(list[i].type)
				{
				case 0:
					printf("Arcade #%d || %s || MONO || Jugadores %d || Cantidad máxima de fichas: %d|| Percenece al salón #%d\n", list[i].id, list[i].country, list[i].players, list[i].maxAmount, list[i].idSalon);
					break;
				case 1:
					printf("Arcade #%d || %s || ESTERÉO || Jugadores %d || Cantidad máxima de fichas: %d|| Percenece al salón #%d\n", list[i].id, list[i].country, list[i].players, list[i].maxAmount, list[i].idSalon);
					break;
				}
			}
		}
		puts("--------------------------------------");
	}

	return status;
}

int printGames(Arcade* list, int len)
{
	int status = FALSE;
	int i;
	int j;
	int flag;

	if(list != NULL && len > 0)
	{
		status = TRUE;

		puts("--------------------------------------");
		for(i = 0; i < len; i++)
		{
			if(list[i].isEmpty == FALSE)
			{
				flag = FALSE;
				for(j = i+1; j < len; j++)
				{
					if(strcmp(list[i].gameName, list[j].gameName) == 0)
					{
						flag = TRUE;
					}
				}
				if(flag == FALSE)
				{
					printf("%d || %s\n", list[i].id, list[i].gameName);
				}
			}
		}
		puts("--------------------------------------");
	}

	return status;
}

int modifyArcade(Arcade* list, int len, int id)
{
	int status = FALSE;
	int option;

	if(list != NULL && len > 0 && id != FALSE)
	{
		ingresoIntMinMax(&option, "¿Que desea modificar?\n1. Cantidad de jugadores\n2. Juego que contiene\n", "Error. Número inválido", 1, 2);
		switch(option)
		{
		case 1:
			ingresoIntMinMax(&list[id].players, "¿Cuantos jugadores tiene el arcade? Máximo 6: ", "Error. Número no válido: ", 1, 6);
			break;
		case 2:
			printGames(list, len);
			ingresoCadena(list[id].gameName, 63, "¿Cómo se llama el nuevo juego de este arcade?", "Error. Ingrese nuevamente: ");
			break;
		}
		status = TRUE;
	}

	return status;
}
