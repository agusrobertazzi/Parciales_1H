#include "salon.h"

static int getNewIdSalon(void)
{
	static int counter = 0;

	return(counter++);
}

int initSalon(Salon* list, int len)
{
	int status = FALSE;
	int i;

	if(list != NULL && len > 0)
	{
		status = TRUE;
		for(i = 0; i < len; i++)
		{
			list[i].isEmpty = TRUE;
		}
	}

	return status;
}

int addSalon(Salon* list, int len)
{
	int status = FALSE;
	int i;

	if(list != NULL && len > 0)
	{
		for(i = 0; i < len; i++)
		{
			if(list[i].isEmpty == TRUE)
			{
				status = TRUE;
				list[i].isEmpty = FALSE;
				list[i].id = getNewIdSalon();
				ingresoCadena(list[i].name, 100, "Ingrese el nombre del salon: ", "Error. Intente nuevamente: ");
				ingresoCadena(list[i].adress, 100, "Ingrese la dirección del salon: ", "Error. Intente nuevamente: ");
				ingresoIntMinMax(&list[i].type, "Ingrese el tipo de salon\n0. Salon\n 1. Shopping\n", "Error. Ingrese un número válido: ", SALON, SHOPPING);
				break;
			}
		}
	}

	return status;
}

int findSalonById(Salon* list, int len, int id)
{
	int status = FALSE;
	int i;

	if(list != NULL && len > 0 && id > -1)
	{
		for(i = 0; i < len; i++)
		{
			if(list[i].id == id && list[i].isEmpty == FALSE)
			{
				status = i;
				break;
			}
		}
	}

	return status;
}

int deleteSalon(Salon* list, int len, int id)
{
	int status = FALSE;

	if(list != NULL && len > 0 && id != FALSE)
	{
		list[id].isEmpty = TRUE;
		status = TRUE;
	}

	return status;
}

int printSalon(Salon* list, int len)
{
	int status = FALSE;
	int i;

	if(list != NULL && len > 0)
	{
		status = TRUE;

		puts("--------------------------------------");
		for(i = 0; i < len; i++)
		{
			if(list[i].isEmpty == FALSE)
			{
				switch(list[i].type)
				{
				case 0:
					printf("Salón #%d || %s || Dirección: %s || SALÓN\n", list[i].id, list[i].name, list[i].adress);
					break;
				case 1:
					printf("Salón #%d || %s || Dirección: %s || SHOPPING\n", list[i].id, list[i].name, list[i].adress);
					break;
				}
			}
		}
		puts("--------------------------------------");
	}

	return status;
}
